{"version":3,"file":"static/js/778.05485bf7.chunk.js","mappings":"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","sources":["api/clickhouseApi.ts","components/ModalForm/ModalForm.tsx","components/TableBox/TableBox.tsx","components/TitleHeader/TitleHeader.tsx","pages/Swallow/TableTtlManager.tsx"],"sourcesContent":["import { AxiosResponse } from 'axios'\nimport axios, { AxiosResFormat } from '.'\nimport { IClickHouseTaskItem, IDatabaseDetailItem } from './interface/clickhouseInterface'\nconst BASE_URL = 'http://musichouse.data.tme.woa.com'\n\nconst FEITIAN_URL = 'http://fetian.gateway.tme.woa.com'\n\nexport const getDatabaseList = (params: {\n    database?: string\n    table?: string\n    owner?: string\n}): Promise<AxiosResponse<IDatabaseDetailItem[]>> => {\n    return axios.get('/api/v1/getDatabasesOverview', { params, baseURL: BASE_URL })\n}\n\nexport const actionUpdateTTL = (params: {\n    swallowTaskId: number\n    db: string\n    tb: string\n    lifecycle: string\n}): Promise<AxiosResponse<{}>> => {\n    return axios.get('/api/swallow/lifecycle/offline/set', { params })\n}\n\nexport const getStatusList = (taskStatusKey: string): Promise<AxiosResponse<{ taskInfoList: IClickHouseTaskItem[] }>> => {\n    return axios.get('/getExecutingTasks', { params: { taskStatusKey }, baseURL: FEITIAN_URL })\n}\n\nexport const actionStopClickhouseTask = (task_id: number | string): Promise<AxiosResponse<{}>> => {\n    return axios.get('/kill', { params: { task_id }, baseURL: FEITIAN_URL })\n}","import React, { ReactNode, useEffect, useMemo, useState } from 'react';\nimport { Modal, Form, Spin, Input } from 'antd';\n\ninterface ModalFormProps {\n\tvisible: boolean;\n\tonCreate: (values: any) => void;\n\tonCancel: () => void;\n\tloading?: boolean;\n\tchildren?: any;\n\ttitle?: string;\n\tformData?: Record<string, any>;\n\twidth?: number;\n\tonValuesChange?: () => {}\n}\n\nconst ModalForm = (props: ModalFormProps): JSX.Element => {\n\tconst [form] = Form.useForm();\n\tconst [, updateState] = useState<any>();\n\tconst forceUpdate = React.useCallback(() => updateState({}), []);\n\n\tuseEffect(() => {\n\t\tif (props.formData) {\n\t\t\tform.setFieldsValue(props.formData);\n\t\t}\n\t}, [props]);\n\n\tconst [formChangeRes, setFormChangeRes] = useState<{\n\t\tcurrentChange: Record<string, any>\n\t\tallValues: Record<string, any>\n\t}>({\n\t\tcurrentChange: {},\n\t\tallValues: {}\n\t})\n\n\t// const propsChildrenMemo = useMemo(() => props.children(form), [])\n\n\treturn (\n\t\t<Modal\n\t\t\t// confirmLoading={props.loading}\n\t\t\tdestroyOnClose={true}\n\t\t\tmaskClosable={false}\n\t\t\twidth={props.width || 680}\n\t\t\tvisible={props.visible}\n\t\t\ttitle={props.title}\n\t\t\tokText=\"确定\"\n\t\t\tcancelText=\"取消\"\n\t\t\tonCancel={() => {\n\t\t\t\tform.resetFields();\n\t\t\t\tprops.onCancel();\n\t\t\t}}\n\t\t\tonOk={() => {\n\t\t\t\tconsole.log(form.getFieldsValue())\n\t\t\t\tform.validateFields()\n\t\t\t\t\t.then((values) => {\n\t\t\t\t\t\tprops.onCreate(values);\n\t\t\t\t\t\t// form.resetFields();\n\t\t\t\t\t})\n\t\t\t\t\t.catch((info) => {\n\t\t\t\t\t\t// console.log('Validate Failed:', info);\n\t\t\t\t\t});\n\t\t\t}}\n\t\t>\n\t\t\t<Spin spinning={props.loading}>\n\t\t\t\t<Form onValuesChange={(value, allValues) => {\n\t\t\t\t\tsetFormChangeRes({\n\t\t\t\t\t\tcurrentChange: value,\n\t\t\t\t\t\tallValues\n\t\t\t\t\t})\n\t\t\t\t}} labelCol={{ span: 5 }} wrapperCol={{ span: 19 }} form={form} layout=\"horizontal\" name=\"form_in_modal\">\n\t\t\t\t\t{props.children && Object.prototype.toString.call(props.children) === '[object Function]'\n\t\t\t\t\t\t? props.children(form, formChangeRes)\n\t\t\t\t\t\t: props.children}\n\t\t\t\t</Form>\n\t\t\t</Spin>\n\t\t</Modal>\n\t);\n};\n\nexport default ModalForm;\n","import React, { ReactNode, useEffect, useState } from 'react';\nimport { Row, Col, Space, Table, ConfigProvider, Button, Modal, Tabs, message, Checkbox } from 'antd';\nimport './TableBox.less';\nimport { TablePaginationConfig } from 'antd/lib/table/Table';\nimport emptyImg from '../../images/emptyBg.png';\nimport { GetRowKey, SorterResult, TableRowSelection } from 'antd/lib/table/interface';\nimport ExportJsonExcel from 'js-export-excel';\nimport { Resizable } from 'react-resizable';\n\nconst CopyToClipboard = require('react-copy-to-clipboard');\n\ninterface IProps {\n\tsize?: 'large' | 'middle' | 'small'\n\ttableKey?: string\n\trowKey?: string | GetRowKey<any>;\n\ttitleNode?: string | ReactNode;\n\tbuttonNode?: ReactNode;\n\tdataSource: any;\n\tcolumns: any;\n\tpagination?: false | TablePaginationConfig;\n\tscroll?:\n\t| ({\n\t\tx?: string | number | true | undefined;\n\t\ty?: string | number | undefined;\n\t} & {\n\t\tscrollToFirstRowOnChange?: boolean | undefined;\n\t})\n\t| undefined;\n\tloading?: boolean;\n\trowSelection?: TableRowSelection<any>;\n\tcancelExportData?: boolean;\n\tonChange?: (\n\t\tpagination: TablePaginationConfig,\n\t\tfilters: Record<string, (string | number | boolean)[] | null>,\n\t\tsorter: SorterResult<any> | SorterResult<any>[],\n\t) => void;\n}\n\nconst customizeRenderEmpty = () => (\n\t<Row justify=\"center\" align=\"middle\" style={{ height: 360, flexDirection: 'column' }}>\n\t\t<img src={emptyImg} style={{ width: 266 }} alt=\"\" />\n\t\t<div>暂无数据</div>\n\t</Row>\n);\n\nconst ResizableTitle = ({ onResize, width, ...restProps }: any) => {\n\tif (!width) {\n\t\treturn <th {...restProps} />;\n\t}\n\n\treturn (\n\t\t<Resizable\n\t\t\twidth={width}\n\t\t\theight={0}\n\t\t\thandle={\n\t\t\t\t<span\n\t\t\t\t\tclassName=\"react-resizable-handle\"\n\t\t\t\t\tonClick={(e) => {\n\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t}\n\t\t\tonResize={onResize}\n\t\t\tdraggableOpts={{ enableUserSelectHack: false }}\n\t\t>\n\t\t\t<th {...restProps} style={{ ...restProps?.style, userSelect: 'none' }} />\n\t\t</Resizable>\n\t);\n};\n\nconst TableBox = (props: IProps) => {\n\tconst [exportDataVisible, setExportDataVisible] = useState(false);\n\tconst [dataFormat, setDataFormat] = useState<{ header: any[]; data: any[] }>({\n\t\theader: [],\n\t\tdata: [],\n\t});\n\tconst [filterValue, setFilterValue] = useState<any[]>([]);\n\n\t// 可伸缩列设置\n\tconst [cols, setCols] = useState(props.columns);\n\tconst handleResize = (index: any) => {\n\t\treturn (_: any, { size }: any) => {\n\t\t\tif (size.width < 100) return\n\t\t\tconst temp = [...cols];\n\t\t\ttemp[index] = { ...temp[index], width: size.width };\n\t\t\tconst tableWidth = temp.reduce((pre: any, next: any) => pre + next.width || 100, 0) + 200\n\t\t\tlocalStorage.setItem(props.tableKey || '', JSON.stringify(temp))\n\t\t\t// console.log(currentTableScroll, temp);\n\t\t\tsetCurrentTableScroll({ ...currentTableScroll, x: tableWidth })\n\t\t\tsetCols(temp);\n\t\t};\n\t};\n\tconst customColumns = cols.map((col: any, index: any) => {\n\t\treturn {\n\t\t\t...col,\n\t\t\twidth: col.width || 200,\n\t\t\tonHeaderCell: (column: any) => {\n\t\t\t\treturn {\n\t\t\t\t\twidth: column.width,\n\t\t\t\t\tonResize: handleResize(index),\n\t\t\t\t};\n\t\t\t},\n\t\t};\n\t});\n\tconst [currentTableScroll, setCurrentTableScroll] = useState(props.scroll)\n\n\tuseEffect(() => {\n\t\tsetCols(props.columns);\n\t}, [props.columns]);\n\n\tuseEffect(() => {\n\t\tsetCurrentTableScroll(props.scroll);\n\t}, [props.scroll]);\n\n\tuseEffect(() => {\n\t\tif (props.dataSource) {\n\t\t\tconst columns = props.columns.filter((item: any) => ~filterValue.indexOf(item.dataIndex));\n\t\t\thanddleFilterHeader(columns, props.dataSource);\n\t\t}\n\t}, [props.dataSource, props.columns]);\n\n\tconst handdleFilterHeader = (dataColumns = [], data: any[]) => {\n\t\tconst columns = dataColumns.map((item: any) => item.dataIndex).filter((item: string) => item !== 'handle');\n\t\tconst sheetHeader = dataColumns.map((item: any) => item.title).filter((item: string) => item !== '操作');\n\t\tconst tarData: any = [];\n\n\t\tdata.forEach((dataRow: any) => {\n\t\t\tconst row: any = {};\n\t\t\tcolumns.map((colName: string) => {\n\t\t\t\tconst res = dataRow[colName];\n\t\t\t\trow[colName] = res || '';\n\t\t\t});\n\t\t\ttarData.push(row);\n\t\t});\n\n\t\tsetDataFormat({\n\t\t\theader: sheetHeader,\n\t\t\tdata: tarData,\n\t\t});\n\t};\n\n\tconst handleClickOutputExcel = () => {\n\t\tconst option: any = {};\n\t\toption.fileName = 'result';\n\t\toption.datas = [\n\t\t\t{\n\t\t\t\tsheetData: dataFormat.data,\n\t\t\t\tsheetName: 'sheet',\n\t\t\t\tsheetHeader: dataFormat.header,\n\t\t\t},\n\t\t];\n\t\tconst toExcel = new ExportJsonExcel(option);\n\t\ttoExcel.saveExcel();\n\t};\n\n\tconst handleExportJira = () => {\n\t\tconst header = dataFormat.header;\n\t\tconst data = dataFormat.data;\n\t\tlet str = '';\n\t\tif (header.length && data.length) {\n\t\t\tstr =\n\t\t\t\t'|' +\n\t\t\t\theader.join('|') +\n\t\t\t\t'|' +\n\t\t\t\t`\n`;\n\t\t\tdata.forEach((row: any) => {\n\t\t\t\tconst rowKey = Object.values(row).map((item) => {\n\t\t\t\t\tif (item === '') {\n\t\t\t\t\t\treturn ' ';\n\t\t\t\t\t}\n\t\t\t\t\treturn item;\n\t\t\t\t});\n\t\t\t\tstr =\n\t\t\t\t\tstr +\n\t\t\t\t\t'|' +\n\t\t\t\t\trowKey.join('|') +\n\t\t\t\t\t'|' +\n\t\t\t\t\t`\n`;\n\t\t\t});\n\t\t} else {\n\t\t\tstr = '';\n\t\t}\n\n\t\treturn str;\n\t};\n\n\tconst handleExportText = () => {\n\t\tconst header = dataFormat.header;\n\t\tconst data = dataFormat.data;\n\t\tlet str = '';\n\t\tif (header.length && data.length) {\n\t\t\tstr =\n\t\t\t\theader.join('\t') +\n\t\t\t\t`\n`;\n\t\t\tdata.forEach((row: any) => {\n\t\t\t\tconst rowKey = Object.values(row).map((item) => {\n\t\t\t\t\tif (item === '') {\n\t\t\t\t\t\treturn ' ';\n\t\t\t\t\t}\n\t\t\t\t\treturn item;\n\t\t\t\t});\n\t\t\t\tstr =\n\t\t\t\t\tstr +\n\t\t\t\t\trowKey.join('\t') +\n\t\t\t\t\t`\n`;\n\t\t\t});\n\t\t} else {\n\t\t\tstr = '';\n\t\t}\n\t\treturn str;\n\t};\n\n\treturn (\n\t\t<Space className=\"tablebox\" direction=\"vertical\" size=\"middle\">\n\t\t\t<Modal\n\t\t\t\twidth={1000}\n\t\t\t\tmaskClosable={false}\n\t\t\t\tcentered={true}\n\t\t\t\tbodyStyle={{ maxHeight: 500, overflow: 'auto' }}\n\t\t\t\tvisible={exportDataVisible}\n\t\t\t\ttitle={'导出数据'}\n\t\t\t\tonCancel={() => {\n\t\t\t\t\tsetExportDataVisible(false);\n\t\t\t\t}}\n\t\t\t\tfooter={null}\n\t\t\t>\n\t\t\t\t<div style={{ position: 'relative' }}>\n\t\t\t\t\t<div className=\"mb16\"><span className=\"pr8\">选择需要导出的列：</span><Checkbox.Group\n\t\t\t\t\t\toptions={props.columns\n\t\t\t\t\t\t\t.map((item: any) => ({ label: item.title, value: item.dataIndex }))\n\t\t\t\t\t\t\t.filter((item: any) => item.value !== 'handle')}\n\t\t\t\t\t\tdefaultValue={[]}\n\t\t\t\t\t\tvalue={filterValue}\n\t\t\t\t\t\tonChange={(values: any) => {\n\t\t\t\t\t\t\tsetFilterValue(values);\n\t\t\t\t\t\t\tconst columns = props.columns.filter((item: any) => ~values.indexOf(item.dataIndex));\n\t\t\t\t\t\t\thanddleFilterHeader(columns, props.dataSource);\n\t\t\t\t\t\t}}\n\t\t\t\t\t/></div>\n\t\t\t\t\t<div style={{ position: 'absolute', right: 0, bottom: 0 }}>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tsize=\"small\"\n\t\t\t\t\t\t\ttype=\"link\"\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tsetFilterValue(\n\t\t\t\t\t\t\t\t\tprops.columns\n\t\t\t\t\t\t\t\t\t\t.map((item: any) => item.dataIndex)\n\t\t\t\t\t\t\t\t\t\t.filter((item: any) => item !== 'handle'),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\thanddleFilterHeader(props.columns, props.dataSource);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t全选\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tsize=\"small\"\n\t\t\t\t\t\t\ttype=\"link\"\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tsetFilterValue([]);\n\t\t\t\t\t\t\t\thanddleFilterHeader([], props.dataSource);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t反选\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<Tabs>\n\t\t\t\t\t<Tabs.TabPane tab=\"Wiki格式\" key=\"jira\">\n\t\t\t\t\t\t<CopyToClipboard text={handleExportJira()} onCopy={() => message.success('已复制到粘贴板')}>\n\t\t\t\t\t\t\t<pre style={{ cursor: 'pointer', minHeight: 100 }}>\n\t\t\t\t\t\t\t\t<code>{handleExportJira()}</code>\n\t\t\t\t\t\t\t</pre>\n\t\t\t\t\t\t</CopyToClipboard>\n\t\t\t\t\t</Tabs.TabPane>\n\t\t\t\t\t<Tabs.TabPane tab=\"Text格式\" key=\"test\">\n\t\t\t\t\t\t<CopyToClipboard text={handleExportText()} onCopy={() => message.success('已复制到粘贴板')}>\n\t\t\t\t\t\t\t<pre style={{ cursor: 'pointer', minHeight: 100 }}>\n\t\t\t\t\t\t\t\t<code>{handleExportText()}</code>\n\t\t\t\t\t\t\t</pre>\n\t\t\t\t\t\t</CopyToClipboard>\n\t\t\t\t\t</Tabs.TabPane>\n\t\t\t\t\t<Tabs.TabPane tab=\"Excel格式\" key=\"excel\">\n\t\t\t\t\t\t<Row justify=\"center\" align=\"middle\" style={{ minHeight: 100 }}>\n\t\t\t\t\t\t\t<Col>\n\t\t\t\t\t\t\t\t<Button type=\"primary\" onClick={handleClickOutputExcel}>\n\t\t\t\t\t\t\t\t\t导出Excel\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t</Row>\n\t\t\t\t\t</Tabs.TabPane>\n\t\t\t\t</Tabs>\n\t\t\t</Modal>\n\t\t\t{\n\t\t\t\tprops.titleNode || props.buttonNode || !props.cancelExportData ? <Row justify=\"space-between\" align=\"middle\">\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t<Space align=\"center\">{props.titleNode}</Space>\n\t\t\t\t\t</Col>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t<Space align=\"center\">\n\t\t\t\t\t\t\t{props.buttonNode}\n\t\t\t\t\t\t\t{props.cancelExportData ? null : (\n\t\t\t\t\t\t\t\t<Button style={{ marginLeft: 6 }} onClick={() => setExportDataVisible(true)}>\n\t\t\t\t\t\t\t\t\t导出数据\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</Space>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row> : null\n\t\t\t}\n\t\t\t<ConfigProvider renderEmpty={customizeRenderEmpty}>\n\t\t\t\t<Table\n\t\t\t\t\tsize={props.size || 'middle'}\n\t\t\t\t\trowKey={props.rowKey ? props.rowKey : 'id'}\n\t\t\t\t\tdataSource={props.dataSource}\n\t\t\t\t\t// columns={props.columns}\n\t\t\t\t\tcomponents={{ header: { cell: ResizableTitle } }}\n\t\t\t\t\tcolumns={customColumns}\n\t\t\t\t\tpagination={props.pagination !== false ? { ...props.pagination } : false}\n\t\t\t\t\tscroll={currentTableScroll}\n\t\t\t\t\tloading={props.loading}\n\t\t\t\t\tonChange={props.onChange}\n\t\t\t\t\trowSelection={props.rowSelection}\n\t\t\t\t/>\n\t\t\t</ConfigProvider>\n\t\t</Space>\n\t);\n};\n\nexport default TableBox;\n","import React, { ReactNode } from 'react';\nimport { Row, Typography, Col, Space } from 'antd';\nimport './TitleHeader.less';\n\nconst { Title } = Typography;\n\ninterface IProps {\n    title: ReactNode | string;\n    children?: ReactNode;\n    noBorderBottom?: boolean;\n    breadcrumbs?: ReactNode | string;\n}\n\nconst TitleHeader = (props: IProps) => {\n    const styles: React.CSSProperties = { position: 'sticky', top: 0 }\n    return (\n        <Row\n            className=\"title-header\"\n            justify=\"space-between\"\n            align=\"middle\"\n            style={props.noBorderBottom ? { borderBottom: 'none', ...styles } : styles}>\n            <div>\n                <Title className=\"d-il mr12\" level={5} style={{ marginBottom: 10 }}>\n                    {props.title}\n                </Title>\n                <div className=\"d-il\">\n                    {props.breadcrumbs}\n                </div>\n            </div>\n\n            <Col>\n                <Space>{props.children ? props.children : null}</Space>\n            </Col>\n        </Row>\n    );\n};\n\nexport default TitleHeader;\n","import React, { useEffect, useState } from 'react';\nimport { Button, Col, Input, TablePaginationConfig, Row, message, Space, Form, Tag, Collapse, Skeleton, InputNumber, Empty } from 'antd';\nimport { Content } from 'antd/lib/layout/layout';\nimport TitleHeader from '../../components/TitleHeader/TitleHeader';\nimport TableBox from '../../components/TableBox/TableBox';\nimport { CaretRightOutlined } from '@ant-design/icons'\nimport { useNavigate } from 'react-router-dom';\nimport ModalForm from '../../components/ModalForm/ModalForm';\nimport cookies from 'js-cookie';\nimport { actionUpdateTTL, getDatabaseList } from '../../api/clickhouseApi';\nimport { IDatabaseDetailItem, ITableDetailItem } from '../../api/interface/clickhouseInterface';\nimport { getParam } from '../../util';\n\nconst adminList = ['shenyuanli', 'zeluswu', 'jiamingmai', 'martinpchen', 'samcchen', 'flytengzeng', 'xuxuqin', 'admin']\nconst isAdmin = adminList.includes(cookies.get('myapp_username') || '')\n\nexport default function TableTtlManager() {\n    const PAGE_SIZE = 10;\n    const navigate = useNavigate();\n    const [dataList, setDataList] = useState<IDatabaseDetailItem[]>([]);\n    const [loading, setLoading] = useState(false);\n    const [loadingTTL, setLoadingTTL] = useState(false)\n    const [visableTTL, setVisableTTL] = useState(false)\n    const [database, setDatabase] = useState<string | undefined>(getParam('database'))\n    const [table, setTable] = useState<string | undefined>(getParam('table'))\n    const [owner, setOwner] = useState<string | undefined>(cookies.get('myapp_username') || undefined)\n    const pageInfoInit: TablePaginationConfig = {\n        current: 1,\n        pageSize: PAGE_SIZE,\n        total: 0,\n        showSizeChanger: true,\n        showQuickJumper: true,\n        showTotal: (total) => `共${total}条`,\n    };\n    const [currentRecord, setCurrentRecord] = useState<ITableDetailItem>()\n\n    useEffect(() => {\n        fetchData();\n    }, []);\n\n    const fetchData = (pageConf = pageInfoInit) => {\n        setLoading(true);\n        getDatabaseList({\n            database: database || undefined,\n            table: table || undefined,\n            owner: owner || undefined\n        })\n            .then((res) => {\n                setDataList(res.data)\n            })\n            .finally(() => setLoading(false));\n    };\n\n    return (\n        <div>\n            <ModalForm\n                title=\"修改TTL\"\n                loading={loadingTTL}\n                visible={visableTTL}\n                formData={{\n                    lifecycle: currentRecord?.ttl\n                }}\n                onCancel={() => { setVisableTTL(false) }}\n                onCreate={(values) => {\n                    setLoadingTTL(true)\n                    const { lifecycle } = values\n                    if (currentRecord) {\n                        actionUpdateTTL({\n                            swallowTaskId: currentRecord.swallowTaskId,\n                            db: currentRecord.database,\n                            tb: currentRecord.table,\n                            lifecycle\n                        }).then((res: any) => {\n                            if (res.data.success) {\n                                message.success('修改TTL成功')\n                                fetchData()\n                                setVisableTTL(false)\n                            } else {\n                                message.error(res.data.errorMessage)\n                            }\n                        }).catch(err => {\n                            message.error('修改TTL失败')\n                        }).finally(() => {\n                            setLoadingTTL(false)\n                        })\n                    }\n\n                }}\n            >\n                <Form.Item\n                    label=\"表名称\"\n                >\n                    <span>{currentRecord?.table}</span>\n                </Form.Item>\n                <Form.Item\n                    label=\"推荐TTL\"\n                >\n                    <span>{currentRecord?.recommendedTtl}</span>\n                </Form.Item>\n                <Form.Item\n                    label=\"TTL\"\n                    name=\"lifecycle\"\n                    rules={[{ required: true, message: '请输入TTL' }]}\n                >\n                    <InputNumber style={{ width: 300 }} />\n                </Form.Item>\n            </ModalForm>\n            <TitleHeader title=\"表TTL管理\" />\n            <div className=\"d-f pt24 plr24\">\n                <div className=\"mr16 d-f ac\">\n                    <span className=\"ta-l s0\" style={{ width: 120 }}>数据库名称：</span>\n                    <Input onPressEnter={() => { fetchData() }} placeholder=\"数据库名称\" style={{ width: 256 }} value={database} onChange={(e) => setDatabase(e.target.value)} />\n                </div>\n                <div className=\"mr16 d-f ac\">\n                    <span className=\"ta-r s0\" style={{ width: 80 }}>表名称：</span>\n                    <Input onPressEnter={() => { fetchData() }} placeholder=\"表名称\" style={{ width: 256 }} value={table} onChange={(e) => setTable(e.target.value)} />\n                </div>\n                {\n                    isAdmin ? <div className=\"mr16 d-f ac\">\n                        <span className=\"ta-r s0\" style={{ width: 80 }}>负责人：</span>\n                        <Input onPressEnter={() => { fetchData() }} placeholder=\"负责人/英文名\" style={{ width: 256 }} value={owner} onChange={(e) => setOwner(e.target.value)} />\n                    </div> : null\n                }\n                <Button type=\"primary\" onClick={() => {\n                    fetchData()\n                }}>搜索</Button>\n            </div>\n            <Content className=\"appmgmt-content\">\n                <div className=\"p24\">\n                    <Skeleton loading={loading} active style={{ minHeight: 500 }}>\n                        {\n                            dataList.length ? <Collapse\n                                bordered={false}\n                                defaultActiveKey={['database0']}\n                                expandIcon={({ isActive }) => <CaretRightOutlined rotate={isActive ? 90 : 0} />}\n                                className=\"site-collapse-custom-collapse\"\n                            >\n                                {\n                                    dataList.map((item, index) => {\n                                        return <Collapse.Panel header={<>\n                                            <span className=\"mr16\">数据库名称：<span className='link'>{item.databaseName}</span></span>\n                                            {/* <span className=\"mr16\">数据库大小：{item.size}</span> */}\n                                            <span className=\"mr16\">表数目：<span>{item.tables.length}</span></span>\n                                        </>} key={`database${index}`} className=\"site-collapse-custom-panel\">\n\n                                            <TableBox\n                                                titleNode={<Col className=\"tablebox-title\">任务列表</Col>}\n                                                // buttonNode={<div><Button type=\"primary\" onClick={handleMultiRecord}>批量补录</Button></div>}\n                                                rowKey={(record: ITableDetailItem) => {\n                                                    return `${record.table}_${index}`\n                                                }}\n                                                // buttonNode={\n                                                //     <Button type=\"primary\" onClick={() => setVisible(true)}>\n                                                //         新建\n                                                //     </Button>\n                                                // }\n                                                columns={[\n                                                    {\n                                                        title: '表名',\n                                                        dataIndex: 'table',\n                                                        key: 'table',\n                                                        width: 300,\n                                                        fixed: 'left',\n                                                        render: (text: any, record: ITableDetailItem) => {\n                                                            return <div>\n                                                                <div className=\"c-theme\">{record.table}</div>\n                                                            </div>\n                                                        }\n                                                    },\n                                                    {\n                                                        title: 'TTL',\n                                                        dataIndex: 'ttl',\n                                                        key: 'ttl',\n                                                        width: 100,\n                                                        align: 'right',\n                                                        sorter: (a: ITableDetailItem, b: ITableDetailItem) => a.ttl - b.ttl,\n                                                        render: (text: any, record: ITableDetailItem) => {\n                                                            if (record.ttl === -999) {\n                                                                return '-'\n                                                            }\n                                                            return <span className={[record.ttl > record.recommendedTtl ? 'c-fail' : 'c-success'].join(' ')}>{record.ttl}</span>\n                                                        }\n                                                    },\n                                                    {\n                                                        title: '推荐TTL',\n                                                        dataIndex: 'recommendedTtl',\n                                                        key: 'recommendedTtl',\n                                                        width: 120,\n                                                        align: 'right',\n                                                        sorter: (a: ITableDetailItem, b: ITableDetailItem) => a.recommendedTtl - b.recommendedTtl,\n                                                        render: (text: any, record: ITableDetailItem) => {\n                                                            if (record.recommendedTtl === -999) {\n                                                                return '-'\n                                                            }\n                                                            return <span className=\"c-theme\">{record.recommendedTtl}</span>\n                                                        }\n                                                    },\n                                                    {\n                                                        title: '成本',\n                                                        dataIndex: 'cost',\n                                                        key: 'cost',\n                                                        width: 150,\n                                                        align: 'right',\n                                                        sorter: (a: ITableDetailItem, b: ITableDetailItem) => a.cost - b.cost,\n                                                        render: (text: any, record: ITableDetailItem) => {\n                                                            return <Tag color='warning'>{(+record.cost || 0).toFixed(2)} ¥</Tag>\n                                                        }\n                                                    },\n                                                    {\n                                                        title: '按推荐可节省',\n                                                        dataIndex: 'savedCostWithRecommendedTtl',\n                                                        key: 'savedCostWithRecommendedTtl',\n                                                        width: 150,\n                                                        align: 'right',\n                                                        sorter: (a: ITableDetailItem, b: ITableDetailItem) => a.savedCostWithRecommendedTtl - b.savedCostWithRecommendedTtl,\n                                                        render: (text: any, record: ITableDetailItem) => {\n                                                            return <Tag color='blue'>{(+record.savedCostWithRecommendedTtl || 0).toFixed(2)} ¥</Tag>\n                                                        }\n                                                    },\n                                                    {\n                                                        title: '类型',\n                                                        dataIndex: 'tableSourceType',\n                                                        key: 'tableSourceType',\n                                                        width: 100,\n                                                    },\n                                                    {\n                                                        title: '表大小',\n                                                        dataIndex: 'formattedSize',\n                                                        key: 'formattedSize',\n                                                        width: 150,\n                                                        align: 'right',\n                                                        sorter: (a: ITableDetailItem, b: ITableDetailItem) => a.size - b.size,\n                                                    },\n                                                    {\n                                                        title: '分区个数',\n                                                        dataIndex: 'cycleNumber',\n                                                        key: 'cycleNumber',\n                                                        width: 120,\n                                                        align: 'right',\n                                                        sorter: (a: ITableDetailItem, b: ITableDetailItem) => a.cycleNumber - b.cycleNumber,\n                                                        render: (text: any, record: ITableDetailItem) => {\n                                                            return record.cycleNumber || '-'\n                                                        }\n                                                    },\n                                                    {\n                                                        title: '负责人',\n                                                        dataIndex: 'owner',\n                                                        key: 'owner',\n                                                        width: 100,\n                                                        render: (text: any, record: ITableDetailItem) => {\n                                                            return record.owner || '-'\n                                                        }\n                                                    },\n\n                                                    {\n                                                        title: '操作',\n                                                        width: 100,\n                                                        dataIndex: 'handle',\n                                                        key: 'handle',\n                                                        align: 'right',\n                                                        fixed: 'right',\n                                                        render: (text: any, record: ITableDetailItem) => {\n                                                            return (\n                                                                <Space size=\"middle\">\n                                                                    <span className=\"link\" onClick={() => {\n                                                                        setVisableTTL(true)\n                                                                        setCurrentRecord(record)\n                                                                    }}>\n                                                                        修改TTL\n                                                                </span>\n                                                                </Space>\n                                                            );\n                                                        },\n                                                    },\n                                                ]}\n                                                loading={loading}\n                                                pagination={false}\n                                                dataSource={item.tables.sort((a, b) => b.cost - a.cost)}\n                                                // onChange={(pageInfo: any) => {\n                                                //     fetchData(pageInfo)\n                                                // }}\n                                                // rowSelection={{\n                                                //     type: 'checkbox',\n                                                //     onChange: (selectedRowKeys) => {\n                                                //         setSelectedRowKeys(selectedRowKeys)\n                                                //     }\n                                                // }}\n                                                scroll={{ x: 1200, y: 400 }}\n                                            />\n                                        </Collapse.Panel>\n                                    })\n                                }\n                            </Collapse> : <div className=\"bor b-side\"><Empty className=\"mtb64\" /></div>\n                        }\n                    </Skeleton>\n                </div>\n            </Content>\n        </div >\n    );\n}\n\n"],"names":["FEITIAN_URL","getDatabaseList","params","axios","baseURL","actionUpdateTTL","getStatusList","taskStatusKey","actionStopClickhouseTask","task_id","props","Form","form","useState","updateState","React","useEffect","formData","setFieldsValue","currentChange","allValues","formChangeRes","setFormChangeRes","destroyOnClose","maskClosable","width","visible","title","okText","cancelText","onCancel","resetFields","onOk","console","log","getFieldsValue","validateFields","then","values","onCreate","catch","info","spinning","loading","onValuesChange","value","labelCol","span","wrapperCol","layout","name","children","Object","prototype","toString","call","CopyToClipboard","require","customizeRenderEmpty","justify","align","style","height","flexDirection","src","emptyImg","alt","ResizableTitle","onResize","restProps","Resizable","handle","className","onClick","e","stopPropagation","draggableOpts","enableUserSelectHack","userSelect","exportDataVisible","setExportDataVisible","header","data","dataFormat","setDataFormat","filterValue","setFilterValue","columns","cols","setCols","handleResize","index","_","size","temp","tableWidth","reduce","pre","next","localStorage","setItem","tableKey","JSON","stringify","setCurrentTableScroll","currentTableScroll","x","customColumns","map","col","onHeaderCell","column","scroll","dataSource","filter","item","indexOf","dataIndex","handdleFilterHeader","dataColumns","sheetHeader","tarData","forEach","dataRow","row","colName","res","push","handleExportJira","str","length","join","rowKey","handleExportText","direction","centered","bodyStyle","maxHeight","overflow","footer","position","options","label","defaultValue","onChange","right","bottom","type","tab","text","onCopy","message","cursor","minHeight","option","datas","sheetData","sheetName","ExportJsonExcel","saveExcel","titleNode","buttonNode","cancelExportData","marginLeft","renderEmpty","components","cell","pagination","rowSelection","Title","Typography","styles","top","noBorderBottom","borderBottom","level","marginBottom","breadcrumbs","isAdmin","includes","cookies","TableTtlManager","useNavigate","dataList","setDataList","setLoading","loadingTTL","setLoadingTTL","visableTTL","setVisableTTL","getParam","database","setDatabase","table","setTable","undefined","owner","setOwner","currentRecord","setCurrentRecord","fetchData","finally","lifecycle","ttl","swallowTaskId","db","tb","success","errorMessage","err","recommendedTtl","rules","required","onPressEnter","placeholder","target","active","bordered","defaultActiveKey","expandIcon","isActive","rotate","databaseName","tables","record","key","fixed","render","sorter","a","b","cost","color","toFixed","savedCostWithRecommendedTtl","cycleNumber","sort","y"],"sourceRoot":""}