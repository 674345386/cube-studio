{"version":3,"file":"static/js/896.ddd4e2a8.chunk.js","mappings":"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","sources":["../node_modules/@ant-design/icons-svg/es/asn/ArrowLeftOutlined.js","../node_modules/@ant-design/icons/es/icons/ArrowLeftOutlined.js","pages/TableDetail/BaseInfo.tsx","api/tableDetailApi.ts","pages/TableDetail/DataPreview.tsx","pages/TableDetail/PartitionDetail.tsx","pages/TableDetail/TableDetail.tsx"],"sourcesContent":["// This icon file is generated automatically.\nvar ArrowLeftOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M872 474H286.9l350.2-304c5.6-4.9 2.2-14-5.2-14h-88.5c-3.9 0-7.6 1.4-10.5 3.9L155 487.8a31.96 31.96 0 000 48.3L535.1 866c1.5 1.3 3.3 2 5.2 2h91.5c7.4 0 10.8-9.2 5.2-14L286.9 550H872c4.4 0 8-3.6 8-8v-60c0-4.4-3.6-8-8-8z\" } }] }, \"name\": \"arrow-left\", \"theme\": \"outlined\" };\nexport default ArrowLeftOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport ArrowLeftOutlinedSvg from \"@ant-design/icons-svg/es/asn/ArrowLeftOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar ArrowLeftOutlined = function ArrowLeftOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: ArrowLeftOutlinedSvg\n  }));\n};\n\nArrowLeftOutlined.displayName = 'ArrowLeftOutlined';\nexport default /*#__PURE__*/React.forwardRef(ArrowLeftOutlined);","import { Button, Col, message, Row, Tag } from 'antd'\nimport React, { useEffect, useState } from 'react'\nimport { getTableDetailBaseInfo } from '../../api/bloodRelationApi'\nimport { ITableDeatilBaseInfoItem, ITableDeatilColumnInfoItem, ITableDeatilTaskInfoItem, ITableDeatilTechnicalInfoItem } from '../../api/interface/tableDetail'\nimport TableBox from '../../components/TableBox/TableBox'\nimport { getParam } from '../../util'\n\nconst CopyToClipboard = require('react-copy-to-clipboard');\n\nexport default function BaseInfo() {\n    const [nodeType, setNodeType] = useState<string>(getParam('nodeType') || '')\n    const [nodeId, setNodeId] = useState<string>(getParam('nodeId') || '')\n    const [loading, setLoading] = useState(true)\n\n    const [baseInfo, setbaseInfo] = useState<ITableDeatilBaseInfoItem[]>([])\n    const [columnInfo, setColumnInfo] = useState<ITableDeatilColumnInfoItem[]>([])\n    const [taskInfo, setTaskInfo] = useState<ITableDeatilTaskInfoItem[]>([])\n    const [technicalInfo, setTechnicalInfo] = useState<ITableDeatilTechnicalInfoItem[]>([])\n    const [ddl, setDdl] = useState<string>('')\n\n    useEffect(() => {\n        getTableDetailBaseInfo({\n            nodeId,\n            nodeType\n        }).then(res => {\n            console.log(res.data.data);\n            const { col_info, base_info, task_info, technical_info, create_table_ddl } = res.data.data\n            setbaseInfo(base_info || [])\n            setColumnInfo(col_info || [])\n            setTaskInfo(task_info || [])\n            setTechnicalInfo(technical_info || [])\n            setDdl(create_table_ddl)\n\n        }).catch(() => { }).finally(() => {\n            setLoading(false)\n        })\n    }, [])\n    return (\n        <div className=\"d-f h100\">\n            <div className=\"flex1 p8\">\n                <TableBox\n                    buttonNode={<CopyToClipboard text={ddl} onCopy={() => message.success('已复制到粘贴板')}>\n                        <Button type=\"primary\" >复制DDL语句</Button>\n                    </CopyToClipboard>}\n                    loading={loading}\n                    rowKey={(record: any) => {\n                        return JSON.stringify(record)\n                    }}\n                    size={'small'}\n                    cancelExportData={true}\n                    columns={[\n                        {\n                            title: '序号',\n                            dataIndex: 'col_index',\n                            key: 'col_index',\n                            width: 80,\n                            render: (text: any, record: any, index: number) => {\n                                return index + 1\n                            }\n                        },\n                        {\n                            title: '字段名称',\n                            dataIndex: 'col_name',\n                            key: 'col_name',\n                            width: 220,\n                        }, {\n                            title: '字段安全等级',\n                            dataIndex: 'field_security',\n                            key: 'field_security',\n                            width: 220,\n                            render: (text: string) => {\n                                return <Tag>{text}</Tag>\n                            }\n                        }, {\n                            title: '描述',\n                            dataIndex: 'comment',\n                            key: 'comment',\n                            width: 220,\n                        }, {\n                            title: '字段类型',\n                            dataIndex: 'data_type',\n                            key: 'data_type',\n                            width: 220,\n                        }, {\n                            title: '是否分区字段',\n                            dataIndex: 'is_partition_col',\n                            key: 'is_partition_col',\n                            width: 220,\n                            render: (text: boolean) => {\n                                return text ? '是' : '否'\n                            }\n                        }\n                    ]}\n                    pagination={false}\n                    dataSource={columnInfo}\n                // scroll={{ x: 1500, y: scrollY }}\n                />\n            </div>\n\n            <div className=\"bg-w\" style={{ maxWidth: 512 }}>\n                {\n                    baseInfo.length ? <div className=\"p24\" style={{ borderLeft: '16px solid #f2f3f5', borderBottom: '16px solid #f2f3f5' }}>\n                        <div className=\"mb8\"><span className=\"bor-l b-theme pl4 fs16\">基本属性</span></div>\n                        {\n                            baseInfo.map((item, index) => {\n                                return <div className=\"d-f mb12\" key={`baseInfoItem_${index}`}>\n                                    <div className=\"ta-l c-hint-b\" style={{ wordBreak: 'keep-all' }}>{item.cn}：</div>\n                                    <div><span style={{ wordBreak: 'break-word', whiteSpace: 'pre-wrap' }}>{item.value}</span></div>\n                                </div>\n                            })\n                        }\n                    </div> : null\n                }\n                {\n                    taskInfo.length ? <div className=\"pb12 p24\" style={{ borderLeft: '16px solid #f2f3f5', borderBottom: '16px solid #f2f3f5' }}>\n                        <div className=\"mb8\"><span className=\"bor-l b-theme pl4 fs16\">任务信息</span></div>\n                        {\n                            taskInfo.map((item, index) => {\n                                return <div className=\"d-f mb12\" key={`baseInfoItem_${index}`}>\n                                    <div className=\"ta-l c-hint-b\" style={{ wordBreak: 'keep-all' }}>{item.cn}：</div>\n                                    <div><span style={{ wordBreak: 'break-word', whiteSpace: 'pre-wrap' }}>{item.value}</span></div>\n                                </div>\n                            })\n                        }\n                    </div> : null\n                }\n                {\n                    technicalInfo.length ? <div className=\"p24\" style={{ borderLeft: '16px solid #f2f3f5', borderBottom: '16px solid #f2f3f5' }}>\n                        <div className=\"mb8\"><span className=\"bor-l b-theme pl4 fs16\">技术信息</span></div>\n                        {\n                            technicalInfo.map((item, index) => {\n                                return <div className=\"d-f mb12\" key={`baseInfoItem_${index}`}>\n                                    <div className=\"ta-l c-hint-b\" style={{ wordBreak: 'keep-all' }}>{item.cn}：</div>\n                                    <div><span style={{ wordBreak: 'break-word', whiteSpace: 'pre-wrap' }}>{item.value}</span></div>\n                                </div>\n                            })\n                        }\n                    </div> : null\n                }\n            </div>\n        </div>\n    )\n}\n","import { AxiosResponse } from 'axios'\nimport axios, { AxiosResFormat } from '.'\nimport { ITableDeatilBaseInfoItem, ITableDeatilColumnInfoItem, ITableDeatilPartitionIitem, ITableDeatilTaskInfoItem, ITableDeatilTechnicalInfoItem } from './interface/tableDetail'\n\nexport const getTableDetailBaseInfo = (params: {\n    nodeId: string\n    nodeType: string\n}): AxiosResFormat<{\n    col_info: ITableDeatilColumnInfoItem[]\n    base_info: ITableDeatilBaseInfoItem[]\n    task_info: ITableDeatilTaskInfoItem[]\n    technical_info: ITableDeatilTechnicalInfoItem[]\n    create_table_ddl: string\n}> => {\n    return axios.get('/api/dataServices/metadata/getBaseInfo', {\n        params,\n        // baseURL: 'http://9.135.153.92:2345'\n    })\n}\n\nexport const getTableDetailDataPreview = (params: {\n    nodeId: string\n    nodeType: string\n}): AxiosResFormat<Array<Record<string, string>>> => {\n    return axios.get('/api/dataServices/metadata/samplingData', {\n        params,\n        // baseURL: 'http://9.135.153.92:2345'\n    })\n}\n\nexport const getTableDetailPartitionDetail = (params: {\n    nodeId: string\n    nodeType: string\n    pageCurrent: number\n    pageSize: number\n    sortOrder: string\n    partition?: string\n}): AxiosResFormat<{\n    total: number\n    page_current: number\n    page_size: number\n    metadata_partition_infos: ITableDeatilPartitionIitem[]\n}> => {\n    return axios.get('/api/dataServices/metadata/searchPartitionDetailsPage', {\n        params,\n        // baseURL: 'http://9.135.153.92:2345'\n    })\n}\n\n\n\n","import { TablePaginationConfig } from 'antd'\nimport React, { useEffect, useState } from 'react'\nimport { getTableDetailDataPreview } from '../../api/tableDetailApi'\nimport TableBox from '../../components/TableBox/TableBox'\nimport { getParam } from '../../util'\n\nexport default function DataPreview() {\n    const [nodeType, setNodeType] = useState<string>(getParam('nodeType') || '')\n    const [nodeId, setNodeId] = useState<string>(getParam('nodeId') || '')\n    const [loading, setLoading] = useState(true)\n    const [dataList, setDataList] = useState<Record<string, string>[]>([])\n    const [columnsConfig, setcolumnsConfig] = useState([])\n\n    const pageInfoInit: TablePaginationConfig = {\n        current: 1,\n        pageSize: 10,\n        total: 0,\n        showSizeChanger: true,\n        showQuickJumper: true,\n        showTotal: (total) => `共${total}条`,\n    };\n    const [pageInfo, setPageInfo] = useState<TablePaginationConfig>(pageInfoInit);\n\n    useEffect(() => {\n        getTableDetailDataPreview({ nodeId, nodeType }).then(res => {\n            const data = res.data.data\n            let columnsConfig = Object.entries(data[0] || {}).reduce((pre: any, [key, value]) => [...pre, { title: key, dataIndex: key, key }], [])\n            setcolumnsConfig(columnsConfig)\n            setDataList(data)\n        }).catch(err => { }).finally(() => {\n            setLoading(false)\n        })\n    }, [])\n    return (\n        <div className=\"p8\">\n            <TableBox\n                loading={loading}\n                rowKey={(record: any) => {\n                    return JSON.stringify(record)\n                }}\n                size={'small'}\n                cancelExportData={true}\n                columns={columnsConfig}\n                pagination={pageInfo}\n                dataSource={dataList}\n                onChange={(pageInfo) => {\n                    setPageInfo({\n                        ...pageInfo,\n                        current: pageInfo.current,\n                        pageSize: pageInfo.pageSize\n                    })\n                }}\n                scroll={{ x: 1500 }}\n            />\n        </div>\n    )\n}\n","import { Button, TablePaginationConfig } from 'antd'\nimport React, { useEffect, useRef, useState } from 'react'\nimport { getTableDetailPartitionDetail } from '../../api/tableDetailApi'\nimport InputSearch from '../../components/InputSearch/InputSearch'\nimport TableBox from '../../components/TableBox/TableBox'\nimport { data2Byte, getParam } from '../../util'\n\nexport default function PartitionDetail() {\n    const [nodeType, setNodeType] = useState<string>(getParam('nodeType') || '')\n    const [nodeId, setNodeId] = useState<string>(getParam('nodeId') || '')\n    const [loading, setLoading] = useState(true)\n    const [dataList, setDataList] = useState<Record<string, any>[]>([])\n    const [partition, setPartition] = useState<string>()\n    const pageInfoInit: TablePaginationConfig = {\n        current: 1,\n        pageSize: 10,\n        total: 0,\n        showSizeChanger: true,\n        showQuickJumper: true,\n        showTotal: (total) => `共${total}条`,\n    };\n    // const [pageInfo, setPageInfo] = useState<TablePaginationConfig>(pageInfoInit);\n\n    const [pageInfo, _setPageInfo] = useState<TablePaginationConfig>(pageInfoInit)\n    const pageInfoRef = useRef(pageInfo);\n    const setPageInfo = (data: any): void => {\n        pageInfoRef.current = data;\n        _setPageInfo(data);\n    };\n\n    const [columnsConfig, setcolumnsConfig] = useState([\n        {\n            title: '序号',\n            dataIndex: 'col_index',\n            key: 'col_index',\n            width: 80,\n            render: (text: any, record: any, index: number) => {\n                return ((pageInfo.current || 0) - 1) * (pageInfo.pageSize || 10) + (index + 1)\n            }\n        },\n        {\n            title: '库表名称',\n            dataIndex: 'node_id',\n            key: 'node_id',\n            width: 220,\n        },\n        {\n            title: '分区',\n            dataIndex: 'partition',\n            key: 'partition',\n            width: 220,\n        }, {\n            title: '分区行数',\n            dataIndex: 'row_count',\n            key: 'row_count',\n            width: 220,\n        }, {\n            title: '分区大小',\n            dataIndex: 'row_size',\n            key: 'row_size',\n            width: 220,\n            // align: 'right',\n            render: (text: any) => {\n                return data2Byte(+text)\n            }\n        }\n    ])\n\n\n\n    useEffect(() => {\n        if (nodeType === 'CK') {\n            setcolumnsConfig([...columnsConfig, {\n                title: '集群详情',\n                dataIndex: 'clusters',\n                key: 'clusters',\n                width: 220,\n                render: (text: any) => {\n                    const res = (text || []).map((item: any) => {\n                        return <div>{item}</div>\n                    })\n                    return res\n                }\n            }])\n        }\n        fetchData()\n    }, [])\n\n    const fetchData = (pageCurrent = 1, pageSize = 10) => {\n        setLoading(true)\n        getTableDetailPartitionDetail({\n            nodeId,\n            nodeType,\n            pageCurrent: pageCurrent - 1,\n            pageSize,\n            sortOrder: 'DESC',\n            partition\n        }).then(res => {\n            const data = res.data.data\n            const { metadata_partition_infos, total } = data\n            // let columnsConfig = Object.entries(metadata_partition_infos[0] || {}).reduce((pre: any, [key, value]) => [...pre, { title: key, dataIndex: key, key }], [])\n            // setcolumnsConfig(columnsConfig)\n            setDataList(metadata_partition_infos)\n\n            setPageInfo({\n                ...pageInfo,\n                current: pageCurrent,\n                pageSize,\n                total\n            })\n        }).catch(err => { }).finally(() => {\n            setLoading(false)\n        })\n    }\n\n    return (\n        <div className=\"p8\">\n            <TableBox\n                buttonNode={<InputSearch value={partition} onSearch={() => {\n                    fetchData()\n                }} onChange={(value) => setPartition(value)} placeholder=\"输入分区ID搜索\" />}\n                loading={loading}\n                rowKey={(record: any) => {\n                    return JSON.stringify(record)\n                }}\n                size={'small'}\n                cancelExportData={true}\n                columns={columnsConfig}\n                pagination={pageInfo}\n                dataSource={dataList}\n                onChange={(info) => {\n                    fetchData(info.current, info.pageSize)\n                }}\n            // scroll={{ x: 1500, y: scrollY }}\n            />\n        </div>\n    )\n}\n","import { ArrowLeftOutlined } from '@ant-design/icons'\nimport { Button, Tabs } from 'antd'\nimport React, { useEffect, useState } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport { getParam } from '../../util'\nimport BloodRelation2 from '../BloodRelation/bloodRelation2'\nimport BaseInfo from './BaseInfo'\nimport DataPreview from './DataPreview'\nimport PartitionDetail from './PartitionDetail'\n\nexport default function TableDetail() {\n    const [nodeType, setNodeType] = useState<string>(getParam('nodeType') || '')\n    const [nodeId, setNodeId] = useState<string>(getParam('nodeId') || '')\n    const defaultActiveKey = getParam('tabId') || '1'\n    const navigate = useNavigate();\n\n    return (\n        <div className=\"bg-title h100 p16 d-f fd-c fade-in\">\n            <div className=\"bg-w mb16 p16\">\n                <div className=\"pb16\"><span className=\"link cp\" onClick={() => {\n                    navigate('/data/metadata/metadata_table')\n                }}><ArrowLeftOutlined />返回</span></div>\n                <div className=\"pb8\"><span>库表类型：</span><strong className=\"fs16\">{nodeType}</strong></div>\n                <div><span>库表名：</span><strong className=\"fs16\">{nodeId}</strong></div>\n            </div>\n            <div className=\"card-container\" style={{ overflowY: 'auto' }}>\n                <Tabs type=\"card\" defaultActiveKey={defaultActiveKey}>\n                    <Tabs.TabPane tab=\"基本信息\" key=\"1\">\n                        <BaseInfo />\n                    </Tabs.TabPane>\n                    <Tabs.TabPane tab=\"血缘关系\" key=\"2\">\n                        <BloodRelation2 />\n                    </Tabs.TabPane>\n                    {\n                        nodeType === 'TDW' || nodeType === 'CK' ? <>\n                            <Tabs.TabPane tab=\"数据预览\" key=\"3\">\n                                <DataPreview />\n                            </Tabs.TabPane>\n                            <Tabs.TabPane tab=\"分区信息\" key=\"4\">\n                                <PartitionDetail />\n                            </Tabs.TabPane>\n                        </> : null\n                    }\n                </Tabs>\n            </div>\n        </div>\n    )\n}\n"],"names":["ArrowLeftOutlined","props","ref","React","AntdIcon","_objectSpread","icon","ArrowLeftOutlinedSvg","displayName","CopyToClipboard","require","BaseInfo","useState","getParam","nodeType","nodeId","loading","setLoading","baseInfo","setbaseInfo","columnInfo","setColumnInfo","taskInfo","setTaskInfo","technicalInfo","setTechnicalInfo","ddl","setDdl","useEffect","getTableDetailBaseInfo","then","res","console","log","data","col_info","base_info","task_info","technical_info","create_table_ddl","catch","finally","className","TableBox","buttonNode","text","onCopy","message","type","rowKey","record","JSON","stringify","size","cancelExportData","columns","title","dataIndex","key","width","render","index","pagination","dataSource","style","maxWidth","length","borderLeft","borderBottom","map","item","wordBreak","cn","whiteSpace","value","getTableDetailPartitionDetail","params","axios","DataPreview","dataList","setDataList","columnsConfig","setcolumnsConfig","current","pageSize","total","showSizeChanger","showQuickJumper","showTotal","pageInfo","setPageInfo","Object","entries","reduce","pre","err","onChange","scroll","x","PartitionDetail","partition","setPartition","_setPageInfo","pageInfoRef","useRef","data2Byte","fetchData","pageCurrent","sortOrder","metadata_partition_infos","InputSearch","onSearch","placeholder","info","TableDetail","defaultActiveKey","navigate","useNavigate","onClick","overflowY","tab"],"sourceRoot":""}