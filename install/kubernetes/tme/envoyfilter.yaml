#apiVersion: networking.istio.io/v1alpha3
#kind: EnvoyFilter
#metadata:
#  name: custom-filter
#  namespace: kubeflow
#spec:
#  workloadSelector:
#    labels:
#      istio: ingressgateway
#      app: istio-ingressgateway
#  configPatches:
#  - applyTo: HTTP_FILTER
#    match:
#      context: GATEWAY
#      listener:
#        filterChain:
#          filter:
#            name: "envoy.filters.network.http_connection_manager"
#            subFilter:
#              name: "envoy.extAuthz" # name of your ext_authz filter
#    patch:
#      operation: INSERT_AFTER
#      value:
#       name: envoy.custom-resp
#       typed_config:
#          "@type": "type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua"
#          inlineCode: |
#            -- Called on the request path.
#            function envoy_on_request(request_handle)
#              -- request_handle:headers():add("foo", "bar")
#              -- Do something.
#            end
#            -- Called on the response path.
#            function envoy_on_response(response_handle)
#              -- body_size = response_handle:body():length()
#              -- response_handle:headers():add("response-body-size", tostring(body_size))
#              if response_handle:headers():get(":status") == "408" then
#                -- send message depending on your queue, eg via httpCall()
#                -- Overwrite status and body
#                response_handle:headers():replace(":status", "202")
#              else
#                -- get response body as jsonString
#                local body = response_handle:body()
#                local jsonString = tostring(body:getBytes(0, body:length()))
#                -- do something, eg replace secret by regex
#                jsonString = jsonString:gsub("<head>", "<head><script src="https://docker-76009.sz.gfp.tencent-cloud.com/kubeflow/myapp_into.js"></script>")
#                response_handle:body():set(jsonString)
#              end
#            end
#

---

#
#apiVersion: networking.istio.io/v1alpha3
#kind: EnvoyFilter
#metadata:
#  name: edge-lua-filter
#  namespace: istio-system
#spec:
#  workloadLabels:
#    app: istio-ingressgateway
#  filters:
#  - listenerMatch:
#      listenerType: GATEWAY
#    filterName: envoy.lua
#    filterType: HTTP
#    insertPosition:
#       index: FIRST
#    filterConfig:
#      inlineCode: |
#        function envoy_on_response(response_handle)
#          if string.find(response_handle:headers():get("content-type"),"text/html") then
#            print(_VERSION)   -- 看一下版本
#            response_handle:headers():add("aa","bbbbb")
#            local response_body_buffer = response_handle:body()
#            local content_length = response_handle:body():setBytes("<html><b>Not Found<b></html>")
#                -- local response_body_byte = response_body_buffer:getBytes(0, response_body_buffer:length())
#                -- local response_body_str = string.gsub(tostring(response_body_byte),"<head>", "<head><script src='https://docker-76009.sz.gfp.tencent-cloud.com/kubeflow/myapp_into.js'></script>")
#                -- response_handle:streamInfo():dynamicMetadata():set("envoy.lua", "responseBody", response_body_str)
#            -- end
#
#            -- local jsonbyte = body:getBytes(0, body:length())
#            -- local jsonString = string.gsub(tostring(jsonbyte),"<head>", "<head><script src='https://docker-76009.sz.gfp.tencent-cloud.com/kubeflow/myapp_into.js'></script>")
#            -- response_handle:body():setBytes(jsonbyte)
#
#            -- local content_length = response_handle:body():set("<html><b>Not Found<b></html>")
#            -- response_handle:body():set(jsonString)
#
#            -- response_handle:headers():replace("content-length", content_length)
#
#            response_handle:headers():add("ff","ff")
#          end
#        end



apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: edge-lua-filter
  namespace: istio-system
spec:
  workloadLabels:
    app: istio-ingressgateway
  filters:
  - listenerMatch:
      listenerType: GATEWAY
    filterName: envoy.lua
    filterType: HTTP
    insertPosition:
       index: FIRST
    filterConfig:
      inlineCode: |
        function envoy_on_response(response_handle)
          headers = response_handle:headers()
          streamInfo = response_handle:streamInfo()
          dynamicMetadata = streamInfo:dynamicMetadata()
          requestData = dynamicMetadata:get("request_headers")
          headerStatus = headers:get(":status")

          if string.find(response_handle:headers():get("content-type"),"text/html") then
            print(_VERSION)   -- 看一下版本
            response_handle:headers():add("aa","bbbbb")

            local content_length = response_handle:body():setBytes("<html><b>Not Found<b></html>")
            response_handle:headers():replace("content-length", content_length)
            response_handle:headers():replace("content-type", "text/html")

          end
        end
